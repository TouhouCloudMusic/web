/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LibraryImport } from './routes/library'
import { Route as FeedsImport } from './routes/feeds'
import { Route as AuthImport } from './routes/auth'
import { Route as ArticlesImport } from './routes/articles'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'
import { Route as userTestavataruploadImport } from './routes/(user)/test_avatar_upload'
import { Route as userProfileImport } from './routes/(user)/profile'
import { Route as userProfileEditImport } from './routes/(user)/profile_.edit'
import { Route as userProfileUsernameImport } from './routes/(user)/profile_.$username'

// Create/Update Routes

const LibraryRoute = LibraryImport.update({
  id: '/library',
  path: '/library',
  getParentRoute: () => rootRoute,
} as any)

const FeedsRoute = FeedsImport.update({
  id: '/feeds',
  path: '/feeds',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRoute,
} as any)

const ArticlesRoute = ArticlesImport.update({
  id: '/articles',
  path: '/articles',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const userTestavataruploadRoute = userTestavataruploadImport.update({
  id: '/(user)/test_avatar_upload',
  path: '/test_avatar_upload',
  getParentRoute: () => rootRoute,
} as any)

const userProfileRoute = userProfileImport.update({
  id: '/(user)/profile',
  path: '/profile',
  getParentRoute: () => rootRoute,
} as any)

const userProfileEditRoute = userProfileEditImport.update({
  id: '/(user)/profile_/edit',
  path: '/profile/edit',
  getParentRoute: () => rootRoute,
} as any)

const userProfileUsernameRoute = userProfileUsernameImport.update({
  id: '/(user)/profile_/$username',
  path: '/profile/$username',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/solid-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/articles': {
      id: '/articles'
      path: '/articles'
      fullPath: '/articles'
      preLoaderRoute: typeof ArticlesImport
      parentRoute: typeof rootRoute
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/feeds': {
      id: '/feeds'
      path: '/feeds'
      fullPath: '/feeds'
      preLoaderRoute: typeof FeedsImport
      parentRoute: typeof rootRoute
    }
    '/library': {
      id: '/library'
      path: '/library'
      fullPath: '/library'
      preLoaderRoute: typeof LibraryImport
      parentRoute: typeof rootRoute
    }
    '/(user)/profile': {
      id: '/(user)/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof userProfileImport
      parentRoute: typeof rootRoute
    }
    '/(user)/test_avatar_upload': {
      id: '/(user)/test_avatar_upload'
      path: '/test_avatar_upload'
      fullPath: '/test_avatar_upload'
      preLoaderRoute: typeof userTestavataruploadImport
      parentRoute: typeof rootRoute
    }
    '/(user)/profile_/$username': {
      id: '/(user)/profile_/$username'
      path: '/profile/$username'
      fullPath: '/profile/$username'
      preLoaderRoute: typeof userProfileUsernameImport
      parentRoute: typeof rootRoute
    }
    '/(user)/profile_/edit': {
      id: '/(user)/profile_/edit'
      path: '/profile/edit'
      fullPath: '/profile/edit'
      preLoaderRoute: typeof userProfileEditImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/articles': typeof ArticlesRoute
  '/auth': typeof AuthRoute
  '/feeds': typeof FeedsRoute
  '/library': typeof LibraryRoute
  '/profile': typeof userProfileRoute
  '/test_avatar_upload': typeof userTestavataruploadRoute
  '/profile/$username': typeof userProfileUsernameRoute
  '/profile/edit': typeof userProfileEditRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/articles': typeof ArticlesRoute
  '/auth': typeof AuthRoute
  '/feeds': typeof FeedsRoute
  '/library': typeof LibraryRoute
  '/profile': typeof userProfileRoute
  '/test_avatar_upload': typeof userTestavataruploadRoute
  '/profile/$username': typeof userProfileUsernameRoute
  '/profile/edit': typeof userProfileEditRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/articles': typeof ArticlesRoute
  '/auth': typeof AuthRoute
  '/feeds': typeof FeedsRoute
  '/library': typeof LibraryRoute
  '/(user)/profile': typeof userProfileRoute
  '/(user)/test_avatar_upload': typeof userTestavataruploadRoute
  '/(user)/profile_/$username': typeof userProfileUsernameRoute
  '/(user)/profile_/edit': typeof userProfileEditRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/articles'
    | '/auth'
    | '/feeds'
    | '/library'
    | '/profile'
    | '/test_avatar_upload'
    | '/profile/$username'
    | '/profile/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/articles'
    | '/auth'
    | '/feeds'
    | '/library'
    | '/profile'
    | '/test_avatar_upload'
    | '/profile/$username'
    | '/profile/edit'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/articles'
    | '/auth'
    | '/feeds'
    | '/library'
    | '/(user)/profile'
    | '/(user)/test_avatar_upload'
    | '/(user)/profile_/$username'
    | '/(user)/profile_/edit'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  ArticlesRoute: typeof ArticlesRoute
  AuthRoute: typeof AuthRoute
  FeedsRoute: typeof FeedsRoute
  LibraryRoute: typeof LibraryRoute
  userProfileRoute: typeof userProfileRoute
  userTestavataruploadRoute: typeof userTestavataruploadRoute
  userProfileUsernameRoute: typeof userProfileUsernameRoute
  userProfileEditRoute: typeof userProfileEditRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  ArticlesRoute: ArticlesRoute,
  AuthRoute: AuthRoute,
  FeedsRoute: FeedsRoute,
  LibraryRoute: LibraryRoute,
  userProfileRoute: userProfileRoute,
  userTestavataruploadRoute: userTestavataruploadRoute,
  userProfileUsernameRoute: userProfileUsernameRoute,
  userProfileEditRoute: userProfileEditRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/articles",
        "/auth",
        "/feeds",
        "/library",
        "/(user)/profile",
        "/(user)/test_avatar_upload",
        "/(user)/profile_/$username",
        "/(user)/profile_/edit"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/articles": {
      "filePath": "articles.tsx"
    },
    "/auth": {
      "filePath": "auth.tsx"
    },
    "/feeds": {
      "filePath": "feeds.tsx"
    },
    "/library": {
      "filePath": "library.tsx"
    },
    "/(user)/profile": {
      "filePath": "(user)/profile.tsx"
    },
    "/(user)/test_avatar_upload": {
      "filePath": "(user)/test_avatar_upload.tsx"
    },
    "/(user)/profile_/$username": {
      "filePath": "(user)/profile_.$username.tsx"
    },
    "/(user)/profile_/edit": {
      "filePath": "(user)/profile_.edit.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
