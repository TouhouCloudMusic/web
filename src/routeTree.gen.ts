/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './route/__root'
import { Route as AuthRouteImport } from './route/auth'
import { Route as AboutRouteImport } from './route/about'
import { Route as IndexRouteImport } from './route/index'
import { Route as SongMockRouteImport } from './route/song/mock'
import { Route as SongIdRouteImport } from './route/song/$id'
import { Route as ReleaseNewRouteImport } from './route/release/new'
import { Route as ReleaseMockRouteImport } from './route/release/mock'
import { Route as ReleaseIdRouteImport } from './route/release/$id'
import { Route as ArtistNewRouteImport } from './route/artist/new'
import { Route as userTest_avatar_uploadRouteImport } from './route/(user)/test_avatar_upload'
import { Route as userProfileRouteImport } from './route/(user)/profile'
import { Route as ArtistIdIndexRouteImport } from './route/artist/$id.index'
import { Route as ReleaseIdEditRouteImport } from './route/release/$id.edit'
import { Route as ArtistIdEditRouteImport } from './route/artist/$id.edit'
import { Route as userProfileEditRouteImport } from './route/(user)/profile_.edit'
import { Route as userProfileUsernameRouteImport } from './route/(user)/profile_.$username'

const AuthRoute = AuthRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SongMockRoute = SongMockRouteImport.update({
  id: '/song/mock',
  path: '/song/mock',
  getParentRoute: () => rootRouteImport,
} as any)
const SongIdRoute = SongIdRouteImport.update({
  id: '/song/$id',
  path: '/song/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const ReleaseNewRoute = ReleaseNewRouteImport.update({
  id: '/release/new',
  path: '/release/new',
  getParentRoute: () => rootRouteImport,
} as any)
const ReleaseMockRoute = ReleaseMockRouteImport.update({
  id: '/release/mock',
  path: '/release/mock',
  getParentRoute: () => rootRouteImport,
} as any)
const ReleaseIdRoute = ReleaseIdRouteImport.update({
  id: '/release/$id',
  path: '/release/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const ArtistNewRoute = ArtistNewRouteImport.update({
  id: '/artist/new',
  path: '/artist/new',
  getParentRoute: () => rootRouteImport,
} as any)
const userTest_avatar_uploadRoute = userTest_avatar_uploadRouteImport.update({
  id: '/(user)/test_avatar_upload',
  path: '/test_avatar_upload',
  getParentRoute: () => rootRouteImport,
} as any)
const userProfileRoute = userProfileRouteImport.update({
  id: '/(user)/profile',
  path: '/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const ArtistIdIndexRoute = ArtistIdIndexRouteImport.update({
  id: '/artist/$id/',
  path: '/artist/$id/',
  getParentRoute: () => rootRouteImport,
} as any)
const ReleaseIdEditRoute = ReleaseIdEditRouteImport.update({
  id: '/edit',
  path: '/edit',
  getParentRoute: () => ReleaseIdRoute,
} as any)
const ArtistIdEditRoute = ArtistIdEditRouteImport.update({
  id: '/artist/$id/edit',
  path: '/artist/$id/edit',
  getParentRoute: () => rootRouteImport,
} as any)
const userProfileEditRoute = userProfileEditRouteImport.update({
  id: '/(user)/profile_/edit',
  path: '/profile/edit',
  getParentRoute: () => rootRouteImport,
} as any)
const userProfileUsernameRoute = userProfileUsernameRouteImport.update({
  id: '/(user)/profile_/$username',
  path: '/profile/$username',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/auth': typeof AuthRoute
  '/profile': typeof userProfileRoute
  '/test_avatar_upload': typeof userTest_avatar_uploadRoute
  '/artist/new': typeof ArtistNewRoute
  '/release/$id': typeof ReleaseIdRouteWithChildren
  '/release/mock': typeof ReleaseMockRoute
  '/release/new': typeof ReleaseNewRoute
  '/song/$id': typeof SongIdRoute
  '/song/mock': typeof SongMockRoute
  '/profile/$username': typeof userProfileUsernameRoute
  '/profile/edit': typeof userProfileEditRoute
  '/artist/$id/edit': typeof ArtistIdEditRoute
  '/release/$id/edit': typeof ReleaseIdEditRoute
  '/artist/$id': typeof ArtistIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/auth': typeof AuthRoute
  '/profile': typeof userProfileRoute
  '/test_avatar_upload': typeof userTest_avatar_uploadRoute
  '/artist/new': typeof ArtistNewRoute
  '/release/$id': typeof ReleaseIdRouteWithChildren
  '/release/mock': typeof ReleaseMockRoute
  '/release/new': typeof ReleaseNewRoute
  '/song/$id': typeof SongIdRoute
  '/song/mock': typeof SongMockRoute
  '/profile/$username': typeof userProfileUsernameRoute
  '/profile/edit': typeof userProfileEditRoute
  '/artist/$id/edit': typeof ArtistIdEditRoute
  '/release/$id/edit': typeof ReleaseIdEditRoute
  '/artist/$id': typeof ArtistIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/auth': typeof AuthRoute
  '/(user)/profile': typeof userProfileRoute
  '/(user)/test_avatar_upload': typeof userTest_avatar_uploadRoute
  '/artist/new': typeof ArtistNewRoute
  '/release/$id': typeof ReleaseIdRouteWithChildren
  '/release/mock': typeof ReleaseMockRoute
  '/release/new': typeof ReleaseNewRoute
  '/song/$id': typeof SongIdRoute
  '/song/mock': typeof SongMockRoute
  '/(user)/profile_/$username': typeof userProfileUsernameRoute
  '/(user)/profile_/edit': typeof userProfileEditRoute
  '/artist/$id/edit': typeof ArtistIdEditRoute
  '/release/$id/edit': typeof ReleaseIdEditRoute
  '/artist/$id/': typeof ArtistIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/auth'
    | '/profile'
    | '/test_avatar_upload'
    | '/artist/new'
    | '/release/$id'
    | '/release/mock'
    | '/release/new'
    | '/song/$id'
    | '/song/mock'
    | '/profile/$username'
    | '/profile/edit'
    | '/artist/$id/edit'
    | '/release/$id/edit'
    | '/artist/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/auth'
    | '/profile'
    | '/test_avatar_upload'
    | '/artist/new'
    | '/release/$id'
    | '/release/mock'
    | '/release/new'
    | '/song/$id'
    | '/song/mock'
    | '/profile/$username'
    | '/profile/edit'
    | '/artist/$id/edit'
    | '/release/$id/edit'
    | '/artist/$id'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/auth'
    | '/(user)/profile'
    | '/(user)/test_avatar_upload'
    | '/artist/new'
    | '/release/$id'
    | '/release/mock'
    | '/release/new'
    | '/song/$id'
    | '/song/mock'
    | '/(user)/profile_/$username'
    | '/(user)/profile_/edit'
    | '/artist/$id/edit'
    | '/release/$id/edit'
    | '/artist/$id/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  AuthRoute: typeof AuthRoute
  userProfileRoute: typeof userProfileRoute
  userTest_avatar_uploadRoute: typeof userTest_avatar_uploadRoute
  ArtistNewRoute: typeof ArtistNewRoute
  ReleaseIdRoute: typeof ReleaseIdRouteWithChildren
  ReleaseMockRoute: typeof ReleaseMockRoute
  ReleaseNewRoute: typeof ReleaseNewRoute
  SongIdRoute: typeof SongIdRoute
  SongMockRoute: typeof SongMockRoute
  userProfileUsernameRoute: typeof userProfileUsernameRoute
  userProfileEditRoute: typeof userProfileEditRoute
  ArtistIdEditRoute: typeof ArtistIdEditRoute
  ArtistIdIndexRoute: typeof ArtistIdIndexRoute
}

declare module '@tanstack/solid-router' {
  interface FileRoutesByPath {
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/song/mock': {
      id: '/song/mock'
      path: '/song/mock'
      fullPath: '/song/mock'
      preLoaderRoute: typeof SongMockRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/song/$id': {
      id: '/song/$id'
      path: '/song/$id'
      fullPath: '/song/$id'
      preLoaderRoute: typeof SongIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/release/new': {
      id: '/release/new'
      path: '/release/new'
      fullPath: '/release/new'
      preLoaderRoute: typeof ReleaseNewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/release/mock': {
      id: '/release/mock'
      path: '/release/mock'
      fullPath: '/release/mock'
      preLoaderRoute: typeof ReleaseMockRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/release/$id': {
      id: '/release/$id'
      path: '/release/$id'
      fullPath: '/release/$id'
      preLoaderRoute: typeof ReleaseIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/artist/new': {
      id: '/artist/new'
      path: '/artist/new'
      fullPath: '/artist/new'
      preLoaderRoute: typeof ArtistNewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(user)/test_avatar_upload': {
      id: '/(user)/test_avatar_upload'
      path: '/test_avatar_upload'
      fullPath: '/test_avatar_upload'
      preLoaderRoute: typeof userTest_avatar_uploadRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(user)/profile': {
      id: '/(user)/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof userProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/artist/$id/': {
      id: '/artist/$id/'
      path: '/artist/$id'
      fullPath: '/artist/$id'
      preLoaderRoute: typeof ArtistIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/release/$id/edit': {
      id: '/release/$id/edit'
      path: '/edit'
      fullPath: '/release/$id/edit'
      preLoaderRoute: typeof ReleaseIdEditRouteImport
      parentRoute: typeof ReleaseIdRoute
    }
    '/artist/$id/edit': {
      id: '/artist/$id/edit'
      path: '/artist/$id/edit'
      fullPath: '/artist/$id/edit'
      preLoaderRoute: typeof ArtistIdEditRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(user)/profile_/edit': {
      id: '/(user)/profile_/edit'
      path: '/profile/edit'
      fullPath: '/profile/edit'
      preLoaderRoute: typeof userProfileEditRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(user)/profile_/$username': {
      id: '/(user)/profile_/$username'
      path: '/profile/$username'
      fullPath: '/profile/$username'
      preLoaderRoute: typeof userProfileUsernameRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface ReleaseIdRouteChildren {
  ReleaseIdEditRoute: typeof ReleaseIdEditRoute
}

const ReleaseIdRouteChildren: ReleaseIdRouteChildren = {
  ReleaseIdEditRoute: ReleaseIdEditRoute,
}

const ReleaseIdRouteWithChildren = ReleaseIdRoute._addFileChildren(
  ReleaseIdRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  AuthRoute: AuthRoute,
  userProfileRoute: userProfileRoute,
  userTest_avatar_uploadRoute: userTest_avatar_uploadRoute,
  ArtistNewRoute: ArtistNewRoute,
  ReleaseIdRoute: ReleaseIdRouteWithChildren,
  ReleaseMockRoute: ReleaseMockRoute,
  ReleaseNewRoute: ReleaseNewRoute,
  SongIdRoute: SongIdRoute,
  SongMockRoute: SongMockRoute,
  userProfileUsernameRoute: userProfileUsernameRoute,
  userProfileEditRoute: userProfileEditRoute,
  ArtistIdEditRoute: ArtistIdEditRoute,
  ArtistIdIndexRoute: ArtistIdIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
