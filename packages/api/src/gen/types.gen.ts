// This file is auto-generated by @hey-api/openapi-ts

export type AlternativeName = {
    id: number;
    name: string;
};

export type Artist = {
    id: number;
    name: string;
    artist_type: ArtistType;
    /**
     * Aliases without own page
     */
    text_aliases?: Array<string> | null;
    start_date?: null | DateWithPrecision;
    end_date?: null | DateWithPrecision;
    /**
     * Profile image of artist
     */
    profile_image_url?: string | null;
    /**
     * List of id of artist aliases
     */
    aliases?: Array<number>;
    links?: Array<string>;
    localized_names?: Array<LocalizedName>;
    start_location?: Location;
    current_location?: Location;
    /**
     * Groups list for individuals, member list for groups,
     */
    memberships?: Array<Membership>;
};

export type ArtistReleaseArtist = {
    id: number;
    name: string;
};

export type ArtistType = 'Solo' | 'Multiple' | 'Unknown';

export type AuthCredential = {
    username: string;
    password: string;
};

export type CatalogNumber = {
    catalog_number: string;
    label_id?: number | null;
};

export type CorrectionType = 'Create' | 'Update' | 'Delete';

export type CreditRole = {
    id: number;
    name: string;
    short_description: string;
    description: string;
};

export type CreditRoleRef = {
    id: number;
    name: string;
};

export type CreditRoleSummary = {
    id: number;
    name: string;
    short_description: string;
};

export type DataInitDiscography = {
    status: string;
    data: InitDiscography;
};

export type DataOptionArtist = {
    status: string;
    data: null | Artist;
};

export type DataOptionCreditRole = {
    status: string;
    data: null | CreditRole;
};

export type DataOptionLabel = {
    status: string;
    data: null | Label;
};

export type DataOptionRelease = {
    status: string;
    data: null | Release;
};

export type DataOptionSong = {
    status: string;
    data: null | Song;
};

export type DataOptionSongLyrics = {
    status: string;
    data: null | SongLyrics;
};

export type DataOptionTag = {
    status: string;
    data: null | Tag;
};

export type DataPaginatedAppearance = {
    status: string;
    data: PaginatedDiscography;
};

export type DataPaginatedCredit = {
    status: string;
    data: PaginatedCredit;
};

export type DataPaginatedDiscography = {
    status: string;
    data: PaginatedDiscography;
};

export type DataUserProfile = {
    status: string;
    data: UserProfile;
};

export type DataVecArtist = {
    status: string;
    data: Array<Artist>;
};

export type DataVecCreditRoleSummary = {
    status: string;
    data: Array<CreditRoleSummary>;
};

export type DataVecEvent = {
    status: string;
    data: Array<Event>;
};

export type DataVecLabel = {
    status: string;
    data: Array<Label>;
};

export type DataVecLanguage = {
    status: string;
    data: Array<Language>;
};

export type DataVecRelease = {
    status: string;
    data: Array<Release>;
};

export type DataVecSong = {
    status: string;
    data: Array<Song>;
};

export type DataVecSongLyrics = {
    status: string;
    data: Array<SongLyrics>;
};

export type DataVecTag = {
    status: string;
    data: Array<Tag>;
};

export type DataVecUserRole = {
    status: string;
    data: Array<UserRoleEnum>;
};

export type DataEvent = {
    status: 'Ok';
    data: {
        id: number;
        name: string;
        short_description?: string | null;
        description?: string | null;
        start_date?: null | DateWithPrecision;
        end_date?: null | DateWithPrecision;
        alternative_names?: Array<AlternativeName>;
    };
};

export type DataOptionI32 = {
    status: 'Ok';
    data: null | number;
};

export type DatePrecision = 'Day' | 'Month' | 'Year';

export type DateWithPrecision = {
    value: string;
    precision: DatePrecision;
};

export type EntityIdent = string;

export type Event = {
    id: number;
    name: string;
    short_description?: string | null;
    description?: string | null;
    start_date?: null | DateWithPrecision;
    end_date?: null | DateWithPrecision;
    alternative_names?: Array<AlternativeName>;
};

export type HandleCorrectionMethod = 'Approve' | 'Reject';

export type InitDiscography = {
    album: PaginatedDiscography;
    ep: PaginatedDiscography;
    compilation: PaginatedDiscography;
    single: PaginatedDiscography;
    demo: PaginatedDiscography;
    other: PaginatedDiscography;
};

export type Label = {
    id: number;
    name: string;
    founded_date?: null | DateWithPrecision;
    dissolved_date?: null | DateWithPrecision;
    founders: Array<number>;
    localized_names: Array<LocalizedName>;
};

export type Language = {
    id: number;
    code: string;
    name: string;
};

export type LocalizedName = {
    language: Language;
    name: string;
};

export type LocalizedTitle = {
    language: Language;
    title: string;
};

export type Location = {
    country?: string | null;
    province?: string | null;
    city?: string | null;
};

export type Membership = {
    artist_id: number;
    roles?: Array<CreditRoleRef>;
    tenure?: Array<Tenure>;
};

export type Message = {
    status: 'Ok';
    message: string;
};

export type NewArtist = {
    name: EntityIdent;
    artist_type: ArtistType;
    /**
     * List of id of artist aliases
     */
    aliases?: Array<number> | null;
    /**
     * Aliases without own page
     */
    text_aliases?: Array<EntityIdent> | null;
    start_date?: null | DateWithPrecision;
    end_date?: null | DateWithPrecision;
    links?: Array<string> | null;
    localized_names?: Array<NewLocalizedName> | null;
    start_location?: null | Location;
    current_location?: null | Location;
    /**
     * Groups list for individuals, member list for groups,
     */
    memberships?: Array<NewMembership> | null;
};

export type NewCorrectionNewArtist = {
    data: {
        name: EntityIdent;
        artist_type: ArtistType;
        /**
         * List of id of artist aliases
         */
        aliases?: Array<number> | null;
        /**
         * Aliases without own page
         */
        text_aliases?: Array<EntityIdent> | null;
        start_date?: null | DateWithPrecision;
        end_date?: null | DateWithPrecision;
        links?: Array<string> | null;
        localized_names?: Array<NewLocalizedName> | null;
        start_location?: null | Location;
        current_location?: null | Location;
        /**
         * Groups list for individuals, member list for groups,
         */
        memberships?: Array<NewMembership> | null;
    };
    description: string;
    type: CorrectionType;
};

export type NewCorrectionNewCreditRole = {
    data: {
        name: EntityIdent;
        short_description?: string | null;
        description?: string | null;
        super_roles?: Array<number> | null;
    };
    description: string;
    type: CorrectionType;
};

export type NewCorrectionNewEvent = {
    data: {
        name: EntityIdent;
        short_description?: string | null;
        description?: string | null;
        start_date?: null | DateWithPrecision;
        end_date?: null | DateWithPrecision;
        alternative_names?: Array<string> | null;
    };
    description: string;
    type: CorrectionType;
};

export type NewCorrectionNewLabel = {
    data: {
        name: EntityIdent;
        founded_date?: null | DateWithPrecision;
        dissolved_date?: null | DateWithPrecision;
        founders?: Array<number> | null;
        localized_names?: Array<NewLocalizedName> | null;
    };
    description: string;
    type: CorrectionType;
};

export type NewCorrectionNewRelease = {
    data: {
        title: string;
        release_type: ReleaseType;
        release_date?: null | DateWithPrecision;
        recording_start_date?: null | DateWithPrecision;
        recording_end_date?: null | DateWithPrecision;
        artists: Array<number>;
        catalog_nums: Array<CatalogNumber>;
        credits: Array<NewCredit>;
        events: Array<number>;
        localized_titles: Array<NewLocalizedTitle>;
        tracks: Array<NewTrack>;
    };
    description: string;
    type: CorrectionType;
};

export type NewCorrectionNewSong = {
    data: {
        title: EntityIdent;
        credits?: Array<NewSongCredit> | null;
        languages?: Array<number> | null;
        localized_titles?: Array<NewLocalizedName> | null;
    };
    description: string;
    type: CorrectionType;
};

export type NewCorrectionNewSongLyrics = {
    data: {
        song_id: number;
        language_id: number;
        content: string;
        is_main: boolean;
    };
    description: string;
    type: CorrectionType;
};

export type NewCorrectionNewTag = {
    data: {
        name: EntityIdent;
        type: TagType;
        short_description?: string | null;
        description?: string | null;
        alt_names?: Array<string> | null;
        relations?: Array<NewTagRelation> | null;
    };
    description: string;
    type: CorrectionType;
};

export type NewCredit = {
    artist_id: number;
    role_id: number;
    on?: Array<number> | null;
};

export type NewCreditRole = {
    name: EntityIdent;
    short_description?: string | null;
    description?: string | null;
    super_roles?: Array<number> | null;
};

export type NewEvent = {
    name: EntityIdent;
    short_description?: string | null;
    description?: string | null;
    start_date?: null | DateWithPrecision;
    end_date?: null | DateWithPrecision;
    alternative_names?: Array<string> | null;
};

export type NewLabel = {
    name: EntityIdent;
    founded_date?: null | DateWithPrecision;
    dissolved_date?: null | DateWithPrecision;
    founders?: Array<number> | null;
    localized_names?: Array<NewLocalizedName> | null;
};

export type NewLocalizedName = {
    language_id: number;
    name: string;
};

export type NewLocalizedTitle = {
    language_id: number;
    title: string;
};

export type NewMembership = {
    artist_id: number;
    roles: Array<number>;
    tenure: Array<Tenure>;
};

export type NewRelease = {
    title: string;
    release_type: ReleaseType;
    release_date?: null | DateWithPrecision;
    recording_start_date?: null | DateWithPrecision;
    recording_end_date?: null | DateWithPrecision;
    artists: Array<number>;
    catalog_nums: Array<CatalogNumber>;
    credits: Array<NewCredit>;
    events: Array<number>;
    localized_titles: Array<NewLocalizedTitle>;
    tracks: Array<NewTrack>;
};

export type NewSong = {
    title: EntityIdent;
    credits?: Array<NewSongCredit> | null;
    languages?: Array<number> | null;
    localized_titles?: Array<NewLocalizedName> | null;
};

export type NewSongCredit = {
    artist_id: number;
    role_id: number;
};

export type NewSongLyrics = {
    song_id: number;
    language_id: number;
    content: string;
    is_main: boolean;
};

export type NewTag = {
    name: EntityIdent;
    type: TagType;
    short_description?: string | null;
    description?: string | null;
    alt_names?: Array<string> | null;
    relations?: Array<NewTagRelation> | null;
};

export type NewTagRelation = {
    related_tag_id: number;
    type: TagRelationType;
};

export type NewTrack = {
    Linked: {
        artists: Array<number>;
        track_number?: string | null;
        duration?: string | null;
        song_id: number;
        display_title?: string | null;
    };
} | {
    Unlinked: {
        artists: Array<number>;
        track_number?: string | null;
        duration?: string | null;
        display_title: string;
    };
};

export type PaginatedCredit = {
    items: Array<{
        title: string;
        artist: Array<ArtistReleaseArtist>;
        cover_url?: string | null;
        release_date?: null | DateWithPrecision;
        release_type: ReleaseType;
        roles: Array<CreditRoleRef>;
    }>;
    next_cursor?: number | null;
};

export type PaginatedDiscography = {
    items: Array<{
        title: string;
        cover_url?: string | null;
        artist: Array<ArtistReleaseArtist>;
        release_date?: null | DateWithPrecision;
        release_type: ReleaseType;
    }>;
    next_cursor?: number | null;
};

export type Release = {
    id: number;
    title: string;
    release_type: ReleaseType;
    release_date?: string | null;
    release_date_precision?: null | DatePrecision;
    recording_date_start?: string | null;
    recording_date_start_precision?: null | DatePrecision;
    recording_date_end?: string | null;
    recording_date_end_precision?: null | DatePrecision;
    cover_art_url?: string | null;
    artists?: Array<ReleaseArtist>;
    credits?: Array<ReleaseCredit>;
    catalog_nums?: Array<CatalogNumber>;
    localized_titles?: Array<LocalizedTitle>;
    tracks?: Array<number>;
};

export type ReleaseArtist = {
    id: number;
    name: string;
};

export type ReleaseCoverArtFormData = {
    data: Blob | File;
};

export type ReleaseCredit = {
    artist: ReleaseArtist;
    role: CreditRoleRef;
    on?: Array<number> | null;
};

export type ReleaseType = 'Album' | 'Ep' | 'Single' | 'Compilation' | 'Demo' | 'Other';

export type SimpleArtist = {
    id: number;
    name: string;
};

export type SimpleRelease = {
    id: number;
    title: string;
    cover_art_url?: string | null;
};

export type Song = {
    id: number;
    title: string;
    artists?: Array<SimpleArtist>;
    releases?: Array<SimpleRelease>;
    credits?: Array<SongCredit>;
    languages?: Array<Language>;
    localized_titles?: Array<LocalizedTitle>;
    lyrics?: Array<SongLyrics>;
};

export type SongCredit = {
    artist: SimpleArtist;
    role: CreditRoleRef;
};

export type SongLyrics = {
    id: number;
    song_id: number;
    content: string;
    is_main: boolean;
    language: Language;
};

export type Tag = {
    id: number;
    name: string;
    type: TagType;
    short_description?: string | null;
    description?: string | null;
    alt_names: Array<AlternativeName>;
    relations: Array<TagRelation>;
};

export type TagRelation = {
    related_tag_id: number;
    type: TagRelationType;
};

export type TagRelationType = 'Inherit' | 'Derive';

export type TagType = 'Descriptor' | 'Genre' | 'Movement' | 'Scene';

export type Tenure = {
    join_year?: number | null;
    leave_year?: number | null;
};

export type UploadAvatar = {
    data: Blob | File;
};

export type UploadProfileBanner = {
    data: Blob | File;
};

export type UserProfile = {
    name: string;
    /**
     * Avatar url with sub directory, eg. ab/cd/abcd..xyz.jpg
     */
    avatar_url?: string | null;
    /**
     * Banner url with sub directory, eg. ab/cd/abcd..xyz.jpg
     */
    banner_url?: string | null;
    last_login: string;
    roles?: Array<UserRole>;
    /**
     * Whether the querist follows the user. Return `None` if querist is not signed in or it's querist's own profile
     */
    is_following?: boolean | null;
    bio?: string | null;
};

export type UserRole = {
    id: number;
    name: UserRoleEnum;
};

export type UserRoleEnum = 'Admin' | 'Moderator' | 'User';

export type FindManyArtistData = {
    body?: never;
    path?: never;
    query: {
        keyword: string;
        artist_type?: Array<ArtistType>;
        exclusion?: Array<number>;
    };
    url: '/artist';
};

export type FindManyArtistErrors = {
    500: {
        status: 'Err';
        message: string;
    };
};

export type FindManyArtistError = FindManyArtistErrors[keyof FindManyArtistErrors];

export type FindManyArtistResponses = {
    200: DataVecArtist;
};

export type FindManyArtistResponse = FindManyArtistResponses[keyof FindManyArtistResponses];

export type CreateArtistData = {
    body: NewCorrectionNewArtist;
    path?: never;
    query?: never;
    url: '/artist';
};

export type CreateArtistErrors = {
    400: {
        status: 'Err';
        message: string;
    };
    401: unknown;
};

export type CreateArtistError = CreateArtistErrors[keyof CreateArtistErrors];

export type CreateArtistResponses = {
    200: Message;
};

export type CreateArtistResponse = CreateArtistResponses[keyof CreateArtistResponses];

export type FindArtistByIdData = {
    body?: never;
    path: {
        id: number;
    };
    query?: {
        artist_type?: Array<ArtistType>;
        exclusion?: Array<number>;
    };
    url: '/artist/{id}';
};

export type FindArtistByIdErrors = {
    500: {
        status: 'Err';
        message: string;
    };
};

export type FindArtistByIdError = FindArtistByIdErrors[keyof FindArtistByIdErrors];

export type FindArtistByIdResponses = {
    200: DataOptionArtist;
};

export type FindArtistByIdResponse = FindArtistByIdResponses[keyof FindArtistByIdResponses];

export type UpsertArtistCorrectionData = {
    body: NewCorrectionNewArtist;
    path: {
        id: number;
    };
    query?: never;
    url: '/artist/{id}';
};

export type UpsertArtistCorrectionErrors = {
    400: {
        status: 'Err';
        message: string;
    };
    401: unknown;
};

export type UpsertArtistCorrectionError = UpsertArtistCorrectionErrors[keyof UpsertArtistCorrectionErrors];

export type UpsertArtistCorrectionResponses = {
    200: Message;
};

export type UpsertArtistCorrectionResponse = UpsertArtistCorrectionResponses[keyof UpsertArtistCorrectionResponses];

export type FindArtistApperancesData = {
    body?: never;
    path: {
        id: number;
    };
    query: {
        cursor: number;
        limit: number;
    };
    url: '/artist/{id}/appearances';
};

export type FindArtistApperancesErrors = {
    500: {
        status: 'Err';
        message: string;
    };
};

export type FindArtistApperancesError = FindArtistApperancesErrors[keyof FindArtistApperancesErrors];

export type FindArtistApperancesResponses = {
    200: DataPaginatedAppearance;
};

export type FindArtistApperancesResponse = FindArtistApperancesResponses[keyof FindArtistApperancesResponses];

export type GetArtistCreditsData = {
    body?: never;
    path: {
        id: number;
    };
    query: {
        cursor: number;
        limit: number;
    };
    url: '/artist/{id}/credits';
};

export type GetArtistCreditsErrors = {
    500: {
        status: 'Err';
        message: string;
    };
};

export type GetArtistCreditsError = GetArtistCreditsErrors[keyof GetArtistCreditsErrors];

export type GetArtistCreditsResponses = {
    200: DataPaginatedCredit;
};

export type GetArtistCreditsResponse = GetArtistCreditsResponses[keyof GetArtistCreditsResponses];

export type FindArtistDiscographiesByTypeData = {
    body?: never;
    path: {
        id: number;
    };
    query: {
        release_type: ReleaseType;
        cursor: number;
        limit: number;
    };
    url: '/artist/{id}/discographies';
};

export type FindArtistDiscographiesByTypeErrors = {
    500: {
        status: 'Err';
        message: string;
    };
};

export type FindArtistDiscographiesByTypeError = FindArtistDiscographiesByTypeErrors[keyof FindArtistDiscographiesByTypeErrors];

export type FindArtistDiscographiesByTypeResponses = {
    200: DataPaginatedDiscography;
};

export type FindArtistDiscographiesByTypeResponse = FindArtistDiscographiesByTypeResponses[keyof FindArtistDiscographiesByTypeResponses];

export type FindArtistDiscographiesInitData = {
    body?: never;
    path: {
        id: number;
    };
    query: {
        limit: number;
    };
    url: '/artist/{id}/discographies/init';
};

export type FindArtistDiscographiesInitErrors = {
    500: {
        status: 'Err';
        message: string;
    };
};

export type FindArtistDiscographiesInitError = FindArtistDiscographiesInitErrors[keyof FindArtistDiscographiesInitErrors];

export type FindArtistDiscographiesInitResponses = {
    200: DataInitDiscography;
};

export type FindArtistDiscographiesInitResponse = FindArtistDiscographiesInitResponses[keyof FindArtistDiscographiesInitResponses];

export type UploadArtistProfileImageData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/artist/{id}/profile-image';
};

export type UploadArtistProfileImageErrors = {
    400: {
        status: 'Err';
        message: string;
    };
    500: {
        status: 'Err';
        message: string;
    };
};

export type UploadArtistProfileImageError = UploadArtistProfileImageErrors[keyof UploadArtistProfileImageErrors];

export type UploadArtistProfileImageResponses = {
    200: Message;
};

export type UploadArtistProfileImageResponse = UploadArtistProfileImageResponses[keyof UploadArtistProfileImageResponses];

export type UploadAvatarData = {
    body: UploadAvatar;
    path?: never;
    query?: never;
    url: '/avatar';
};

export type UploadAvatarErrors = {
    400: {
        status: 'Err';
        message: string;
    };
    401: unknown;
    500: {
        status: 'Err';
        message: string;
    };
};

export type UploadAvatarError = UploadAvatarErrors[keyof UploadAvatarErrors];

export type UploadAvatarResponses = {
    200: Message;
};

export type UploadAvatarResponse = UploadAvatarResponses[keyof UploadAvatarResponses];

export type HandleCorrectionData = {
    body?: never;
    path: {
        id: number;
    };
    query: {
        method: HandleCorrectionMethod;
    };
    url: '/correction/{id}';
};

export type HandleCorrectionErrors = {
    401: unknown;
};

export type HandleCorrectionResponses = {
    200: Message;
};

export type HandleCorrectionResponse = HandleCorrectionResponses[keyof HandleCorrectionResponses];

export type CreateCreditRoleData = {
    body: NewCorrectionNewCreditRole;
    path?: never;
    query?: never;
    url: '/credit-role';
};

export type CreateCreditRoleErrors = {
    401: unknown;
};

export type CreateCreditRoleResponses = {
    200: Message;
};

export type CreateCreditRoleResponse = CreateCreditRoleResponses[keyof CreateCreditRoleResponses];

export type FindManyCreditRolesSummaryData = {
    body?: never;
    path?: never;
    query: {
        keyword: string;
    };
    url: '/credit-role/summary';
};

export type FindManyCreditRolesSummaryErrors = {
    500: {
        status: 'Err';
        message: string;
    };
};

export type FindManyCreditRolesSummaryError = FindManyCreditRolesSummaryErrors[keyof FindManyCreditRolesSummaryErrors];

export type FindManyCreditRolesSummaryResponses = {
    200: DataVecCreditRoleSummary;
};

export type FindManyCreditRolesSummaryResponse = FindManyCreditRolesSummaryResponses[keyof FindManyCreditRolesSummaryResponses];

export type FindCreditRoleByIdData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/credit-role/{id}';
};

export type FindCreditRoleByIdErrors = {
    500: {
        status: 'Err';
        message: string;
    };
};

export type FindCreditRoleByIdError = FindCreditRoleByIdErrors[keyof FindCreditRoleByIdErrors];

export type FindCreditRoleByIdResponses = {
    200: DataOptionCreditRole;
};

export type FindCreditRoleByIdResponse = FindCreditRoleByIdResponses[keyof FindCreditRoleByIdResponses];

export type UpsertCreditRoleCorrectionData = {
    body: NewCorrectionNewCreditRole;
    path: {
        id: number;
    };
    query?: never;
    url: '/credit-role/{id}';
};

export type UpsertCreditRoleCorrectionErrors = {
    401: unknown;
};

export type UpsertCreditRoleCorrectionResponses = {
    200: Message;
};

export type UpsertCreditRoleCorrectionResponse = UpsertCreditRoleCorrectionResponses[keyof UpsertCreditRoleCorrectionResponses];

export type FindEventByKeywordData = {
    body?: never;
    path?: never;
    query: {
        keyword: string;
    };
    url: '/event';
};

export type FindEventByKeywordErrors = {
    500: {
        status: 'Err';
        message: string;
    };
};

export type FindEventByKeywordError = FindEventByKeywordErrors[keyof FindEventByKeywordErrors];

export type FindEventByKeywordResponses = {
    200: DataVecEvent;
};

export type FindEventByKeywordResponse = FindEventByKeywordResponses[keyof FindEventByKeywordResponses];

export type CreateData = {
    body: NewCorrectionNewEvent;
    path?: never;
    query?: never;
    url: '/event';
};

export type CreateErrors = {
    401: unknown;
};

export type CreateResponses = {
    200: Message;
};

export type CreateResponse = CreateResponses[keyof CreateResponses];

export type FindEventByIdData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/event/{id}';
};

export type FindEventByIdErrors = {
    500: {
        status: 'Err';
        message: string;
    };
};

export type FindEventByIdError = FindEventByIdErrors[keyof FindEventByIdErrors];

export type FindEventByIdResponses = {
    200: DataEvent;
};

export type FindEventByIdResponse = FindEventByIdResponses[keyof FindEventByIdResponses];

export type UpsertCorrectionData = {
    body: NewEvent;
    path: {
        id: number;
    };
    query?: never;
    url: '/event/{id}';
};

export type UpsertCorrectionErrors = {
    401: unknown;
};

export type UpsertCorrectionResponses = {
    200: Message;
};

export type UpsertCorrectionResponse = UpsertCorrectionResponses[keyof UpsertCorrectionResponses];

export type HealthCheckData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health_check';
};

export type HealthCheckResponses = {
    200: unknown;
};

export type FindLabelByKeywordData = {
    body?: never;
    path?: never;
    query: {
        keyword: string;
    };
    url: '/label';
};

export type FindLabelByKeywordErrors = {
    401: unknown;
    500: {
        status: 'Err';
        message: string;
    };
};

export type FindLabelByKeywordError = FindLabelByKeywordErrors[keyof FindLabelByKeywordErrors];

export type FindLabelByKeywordResponses = {
    200: DataVecLabel;
};

export type FindLabelByKeywordResponse = FindLabelByKeywordResponses[keyof FindLabelByKeywordResponses];

export type CreateLabelData = {
    body: NewCorrectionNewLabel;
    path?: never;
    query?: never;
    url: '/label';
};

export type CreateLabelErrors = {
    401: unknown;
};

export type CreateLabelResponses = {
    200: Message;
};

export type CreateLabelResponse = CreateLabelResponses[keyof CreateLabelResponses];

export type FindLabelByIdData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/label/{id}';
};

export type FindLabelByIdErrors = {
    401: unknown;
    500: {
        status: 'Err';
        message: string;
    };
};

export type FindLabelByIdError = FindLabelByIdErrors[keyof FindLabelByIdErrors];

export type FindLabelByIdResponses = {
    200: DataOptionLabel;
};

export type FindLabelByIdResponse = FindLabelByIdResponses[keyof FindLabelByIdResponses];

export type UpsertLabelCorrectionData = {
    body: NewCorrectionNewLabel;
    path: {
        id: number;
    };
    query?: never;
    url: '/label/{id}';
};

export type UpsertLabelCorrectionErrors = {
    401: unknown;
};

export type UpsertLabelCorrectionResponses = {
    200: Message;
};

export type UpsertLabelCorrectionResponse = UpsertLabelCorrectionResponses[keyof UpsertLabelCorrectionResponses];

export type LanguageListData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/languages';
};

export type LanguageListErrors = {
    500: {
        status: 'Err';
        message: string;
    };
};

export type LanguageListError = LanguageListErrors[keyof LanguageListErrors];

export type LanguageListResponses = {
    200: DataVecLanguage;
};

export type LanguageListResponse = LanguageListResponses[keyof LanguageListResponses];

export type ProfileData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/profile';
};

export type ProfileErrors = {
    404: unknown;
    500: {
        status: 'Err';
        message: string;
    };
};

export type ProfileError = ProfileErrors[keyof ProfileErrors];

export type ProfileResponses = {
    200: DataUserProfile;
};

export type ProfileResponse = ProfileResponses[keyof ProfileResponses];

export type UploadProfileBannerData = {
    body: UploadProfileBanner;
    path?: never;
    query?: never;
    url: '/profile-banner';
};

export type UploadProfileBannerErrors = {
    400: {
        status: 'Err';
        message: string;
    };
    401: unknown;
    500: {
        status: 'Err';
        message: string;
    };
};

export type UploadProfileBannerError = UploadProfileBannerErrors[keyof UploadProfileBannerErrors];

export type UploadProfileBannerResponses = {
    200: Message;
};

export type UploadProfileBannerResponse = UploadProfileBannerResponses[keyof UploadProfileBannerResponses];

export type UpdateBioData = {
    body: string;
    path?: never;
    query?: never;
    url: '/profile/bio';
};

export type UpdateBioErrors = {
    400: {
        status: 'Err';
        message: string;
    };
    401: unknown;
    500: {
        status: 'Err';
        message: string;
    };
};

export type UpdateBioError = UpdateBioErrors[keyof UpdateBioErrors];

export type UpdateBioResponses = {
    200: Message;
};

export type UpdateBioResponse = UpdateBioResponses[keyof UpdateBioResponses];

export type ProfileWithNameData = {
    body?: never;
    path: {
        name: string;
    };
    query?: never;
    url: '/profile/{name}';
};

export type ProfileWithNameErrors = {
    404: unknown;
    500: {
        status: 'Err';
        message: string;
    };
};

export type ProfileWithNameError = ProfileWithNameErrors[keyof ProfileWithNameErrors];

export type ProfileWithNameResponses = {
    200: DataUserProfile;
};

export type ProfileWithNameResponse = ProfileWithNameResponses[keyof ProfileWithNameResponses];

export type FindReleaseByKeywordData = {
    body?: never;
    path?: never;
    query: {
        keyword: string;
    };
    url: '/release';
};

export type FindReleaseByKeywordErrors = {
    500: {
        status: 'Err';
        message: string;
    };
};

export type FindReleaseByKeywordError = FindReleaseByKeywordErrors[keyof FindReleaseByKeywordErrors];

export type FindReleaseByKeywordResponses = {
    200: DataVecRelease;
};

export type FindReleaseByKeywordResponse = FindReleaseByKeywordResponses[keyof FindReleaseByKeywordResponses];

export type CreateReleaseData = {
    body: NewCorrectionNewRelease;
    path?: never;
    query?: never;
    url: '/release';
};

export type CreateReleaseErrors = {
    401: unknown;
};

export type CreateReleaseResponses = {
    200: Message;
};

export type CreateReleaseResponse = CreateReleaseResponses[keyof CreateReleaseResponses];

export type FindReleaseByIdData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/release/{id}';
};

export type FindReleaseByIdErrors = {
    500: {
        status: 'Err';
        message: string;
    };
};

export type FindReleaseByIdError = FindReleaseByIdErrors[keyof FindReleaseByIdErrors];

export type FindReleaseByIdResponses = {
    200: DataOptionRelease;
};

export type FindReleaseByIdResponse = FindReleaseByIdResponses[keyof FindReleaseByIdResponses];

export type UpdateReleaseData = {
    body: NewCorrectionNewRelease;
    path: {
        id: number;
    };
    query?: never;
    url: '/release/{id}';
};

export type UpdateReleaseErrors = {
    401: unknown;
};

export type UpdateReleaseResponses = {
    200: Message;
};

export type UpdateReleaseResponse = UpdateReleaseResponses[keyof UpdateReleaseResponses];

export type UploadReleaseCoverArtData = {
    body: ReleaseCoverArtFormData;
    path: {
        id: number;
    };
    query?: never;
    url: '/release/{id}/cover-art';
};

export type UploadReleaseCoverArtErrors = {
    400: {
        status: 'Err';
        message: string;
    };
    401: unknown;
    500: {
        status: 'Err';
        message: string;
    };
};

export type UploadReleaseCoverArtError = UploadReleaseCoverArtErrors[keyof UploadReleaseCoverArtErrors];

export type UploadReleaseCoverArtResponses = {
    200: Message;
};

export type UploadReleaseCoverArtResponse = UploadReleaseCoverArtResponses[keyof UploadReleaseCoverArtResponses];

export type SignInData = {
    body: AuthCredential;
    path?: never;
    query?: never;
    url: '/sign-in';
};

export type SignInErrors = {
    400: {
        status: 'Err';
        message: string;
    };
    401: unknown;
    409: {
        status: 'Err';
        message: string;
    };
    500: {
        status: 'Err';
        message: string;
    };
};

export type SignInError = SignInErrors[keyof SignInErrors];

export type SignInResponses = {
    200: DataUserProfile;
};

export type SignInResponse = SignInResponses[keyof SignInResponses];

export type SignOutData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/sign-out';
};

export type SignOutErrors = {
    400: {
        status: 'Err';
        message: string;
    };
    401: unknown;
    409: {
        status: 'Err';
        message: string;
    };
    500: {
        status: 'Err';
        message: string;
    };
};

export type SignOutError = SignOutErrors[keyof SignOutErrors];

export type SignOutResponses = {
    200: Message;
};

export type SignOutResponse = SignOutResponses[keyof SignOutResponses];

export type SignUpData = {
    body: AuthCredential;
    path?: never;
    query?: never;
    url: '/sign-up';
};

export type SignUpErrors = {
    400: {
        status: 'Err';
        message: string;
    };
    409: {
        status: 'Err';
        message: string;
    };
};

export type SignUpError = SignUpErrors[keyof SignUpErrors];

export type SignUpResponses = {
    200: DataUserProfile;
};

export type SignUpResponse = SignUpResponses[keyof SignUpResponses];

export type FindSongByKeywordData = {
    body?: never;
    path?: never;
    query: {
        keyword: string;
    };
    url: '/song';
};

export type FindSongByKeywordErrors = {
    500: {
        status: 'Err';
        message: string;
    };
};

export type FindSongByKeywordError = FindSongByKeywordErrors[keyof FindSongByKeywordErrors];

export type FindSongByKeywordResponses = {
    200: DataVecSong;
};

export type FindSongByKeywordResponse = FindSongByKeywordResponses[keyof FindSongByKeywordResponses];

export type CreateSongData = {
    body: NewCorrectionNewSong;
    path?: never;
    query?: never;
    url: '/song';
};

export type CreateSongErrors = {
    401: unknown;
};

export type CreateSongResponses = {
    200: Message;
};

export type CreateSongResponse = CreateSongResponses[keyof CreateSongResponses];

export type FindOneSongLyricsData = {
    body?: never;
    path?: never;
    query: {
        song_id: number;
        language_id: number;
    };
    url: '/song-lyrics';
};

export type FindOneSongLyricsErrors = {
    500: {
        status: 'Err';
        message: string;
    };
};

export type FindOneSongLyricsError = FindOneSongLyricsErrors[keyof FindOneSongLyricsErrors];

export type FindOneSongLyricsResponses = {
    200: DataOptionSongLyrics;
};

export type FindOneSongLyricsResponse = FindOneSongLyricsResponses[keyof FindOneSongLyricsResponses];

export type CreateSongLyricsData = {
    body: NewCorrectionNewSongLyrics;
    path?: never;
    query?: never;
    url: '/song-lyrics';
};

export type CreateSongLyricsErrors = {
    400: {
        status: 'Err';
        message: string;
    };
    401: unknown;
};

export type CreateSongLyricsError = CreateSongLyricsErrors[keyof CreateSongLyricsErrors];

export type CreateSongLyricsResponses = {
    200: Message;
};

export type CreateSongLyricsResponse = CreateSongLyricsResponses[keyof CreateSongLyricsResponses];

export type FindManySongLyricsData = {
    body?: never;
    path?: never;
    query: {
        song_id: number;
    };
    url: '/song-lyrics/many';
};

export type FindManySongLyricsErrors = {
    500: {
        status: 'Err';
        message: string;
    };
};

export type FindManySongLyricsError = FindManySongLyricsErrors[keyof FindManySongLyricsErrors];

export type FindManySongLyricsResponses = {
    200: DataVecSongLyrics;
};

export type FindManySongLyricsResponse = FindManySongLyricsResponses[keyof FindManySongLyricsResponses];

export type UpdateSongLyricsData = {
    body: NewCorrectionNewSongLyrics;
    path: {
        id: number;
    };
    query?: never;
    url: '/song-lyrics/{id}';
};

export type UpdateSongLyricsErrors = {
    401: unknown;
};

export type UpdateSongLyricsResponses = {
    200: Message;
};

export type UpdateSongLyricsResponse = UpdateSongLyricsResponses[keyof UpdateSongLyricsResponses];

export type FindSongByIdData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/song/{id}';
};

export type FindSongByIdErrors = {
    500: {
        status: 'Err';
        message: string;
    };
};

export type FindSongByIdError = FindSongByIdErrors[keyof FindSongByIdErrors];

export type FindSongByIdResponses = {
    200: DataOptionSong;
};

export type FindSongByIdResponse = FindSongByIdResponses[keyof FindSongByIdResponses];

export type UpdateSongData = {
    body: NewSong;
    path: {
        id: number;
    };
    query?: never;
    url: '/song/{id}';
};

export type UpdateSongErrors = {
    401: unknown;
};

export type UpdateSongResponses = {
    200: Message;
};

export type UpdateSongResponse = UpdateSongResponses[keyof UpdateSongResponses];

export type FindTagByKeywordData = {
    body?: never;
    path?: never;
    query: {
        keyword: string;
    };
    url: '/tag';
};

export type FindTagByKeywordErrors = {
    401: unknown;
    500: {
        status: 'Err';
        message: string;
    };
};

export type FindTagByKeywordError = FindTagByKeywordErrors[keyof FindTagByKeywordErrors];

export type FindTagByKeywordResponses = {
    200: DataVecTag;
};

export type FindTagByKeywordResponse = FindTagByKeywordResponses[keyof FindTagByKeywordResponses];

export type CreateTagData = {
    body: NewCorrectionNewTag;
    path?: never;
    query?: never;
    url: '/tag';
};

export type CreateTagErrors = {
    401: unknown;
    500: {
        status: 'Err';
        message: string;
    };
};

export type CreateTagError = CreateTagErrors[keyof CreateTagErrors];

export type CreateTagResponses = {
    200: Message;
};

export type CreateTagResponse = CreateTagResponses[keyof CreateTagResponses];

export type FindTagByIdData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/tag/{id}';
};

export type FindTagByIdErrors = {
    401: unknown;
    500: {
        status: 'Err';
        message: string;
    };
};

export type FindTagByIdError = FindTagByIdErrors[keyof FindTagByIdErrors];

export type FindTagByIdResponses = {
    200: DataOptionTag;
};

export type FindTagByIdResponse = FindTagByIdResponses[keyof FindTagByIdResponses];

export type UpsertTagCorrectionData = {
    body: NewCorrectionNewTag;
    path: {
        id: number;
    };
    query?: never;
    url: '/tag/{id}';
};

export type UpsertTagCorrectionErrors = {
    401: unknown;
};

export type UpsertTagCorrectionResponses = {
    200: Message;
};

export type UpsertTagCorrectionResponse = UpsertTagCorrectionResponses[keyof UpsertTagCorrectionResponses];

export type UserRolesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/user-roles';
};

export type UserRolesErrors = {
    500: {
        status: 'Err';
        message: string;
    };
};

export type UserRolesError = UserRolesErrors[keyof UserRolesErrors];

export type UserRolesResponses = {
    200: DataVecUserRole;
};

export type UserRolesResponse = UserRolesResponses[keyof UserRolesResponses];

export type PendingCorrectionData = {
    body?: never;
    path: {
        entity_type: 'artist' | 'label' | 'release' | 'song' | 'tag' | 'event' | 'song-lyrics' | 'credit-role';
        id: number;
    };
    query?: never;
    url: '/{entity_type}/{id}/pending-correction';
};

export type PendingCorrectionErrors = {
    401: unknown;
    500: {
        status: 'Err';
        message: string;
    };
};

export type PendingCorrectionError = PendingCorrectionErrors[keyof PendingCorrectionErrors];

export type PendingCorrectionResponses = {
    200: DataOptionI32;
};

export type PendingCorrectionResponse = PendingCorrectionResponses[keyof PendingCorrectionResponses];

export type ClientOptions = {
    baseUrl: 'http://tenshi-dev.japaneast.cloudapp.azure.com:12345' | (string & {});
};