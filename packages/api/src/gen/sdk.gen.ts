// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer } from './client';
import type { FindManyArtistData, FindManyArtistResponses, FindManyArtistErrors, CreateArtistData, CreateArtistResponses, CreateArtistErrors, FindArtistByIdData, FindArtistByIdResponses, FindArtistByIdErrors, UpsertArtistCorrectionData, UpsertArtistCorrectionResponses, UpsertArtistCorrectionErrors, FindArtistApperancesData, FindArtistApperancesResponses, FindArtistApperancesErrors, GetArtistCreditsData, GetArtistCreditsResponses, GetArtistCreditsErrors, FindArtistDiscographiesByTypeData, FindArtistDiscographiesByTypeResponses, FindArtistDiscographiesByTypeErrors, FindArtistDiscographiesInitData, FindArtistDiscographiesInitResponses, FindArtistDiscographiesInitErrors, UploadArtistProfileImageData, UploadArtistProfileImageResponses, UploadArtistProfileImageErrors, UploadAvatarData, UploadAvatarResponses, UploadAvatarErrors, HandleCorrectionData, HandleCorrectionResponses, HandleCorrectionErrors, CreateCreditRoleData, CreateCreditRoleResponses, CreateCreditRoleErrors, FindManyCreditRolesSummaryData, FindManyCreditRolesSummaryResponses, FindManyCreditRolesSummaryErrors, FindCreditRoleByIdData, FindCreditRoleByIdResponses, FindCreditRoleByIdErrors, UpsertCreditRoleCorrectionData, UpsertCreditRoleCorrectionResponses, UpsertCreditRoleCorrectionErrors, FindEventByKeywordData, FindEventByKeywordResponses, FindEventByKeywordErrors, CreateData, CreateResponses, CreateErrors, FindEventByIdData, FindEventByIdResponses, FindEventByIdErrors, UpsertCorrectionData, UpsertCorrectionResponses, UpsertCorrectionErrors, HealthCheckData, HealthCheckResponses, FindLabelByKeywordData, FindLabelByKeywordResponses, FindLabelByKeywordErrors, CreateLabelData, CreateLabelResponses, CreateLabelErrors, FindLabelByIdData, FindLabelByIdResponses, FindLabelByIdErrors, UpsertLabelCorrectionData, UpsertLabelCorrectionResponses, UpsertLabelCorrectionErrors, LanguageListData, LanguageListResponses, LanguageListErrors, ProfileData, ProfileResponses, ProfileErrors, UploadProfileBannerData, UploadProfileBannerResponses, UploadProfileBannerErrors, UpdateBioData, UpdateBioResponses, UpdateBioErrors, ProfileWithNameData, ProfileWithNameResponses, ProfileWithNameErrors, FindReleaseByKeywordData, FindReleaseByKeywordResponses, FindReleaseByKeywordErrors, CreateReleaseData, CreateReleaseResponses, CreateReleaseErrors, FindReleaseByIdData, FindReleaseByIdResponses, FindReleaseByIdErrors, UpdateReleaseData, UpdateReleaseResponses, UpdateReleaseErrors, UploadReleaseCoverArtData, UploadReleaseCoverArtResponses, UploadReleaseCoverArtErrors, SignInData, SignInResponses, SignInErrors, SignOutData, SignOutResponses, SignOutErrors, SignUpData, SignUpResponses, SignUpErrors, FindSongByKeywordData, FindSongByKeywordResponses, FindSongByKeywordErrors, CreateSongData, CreateSongResponses, CreateSongErrors, FindOneSongLyricsData, FindOneSongLyricsResponses, FindOneSongLyricsErrors, CreateSongLyricsData, CreateSongLyricsResponses, CreateSongLyricsErrors, FindManySongLyricsData, FindManySongLyricsResponses, FindManySongLyricsErrors, UpdateSongLyricsData, UpdateSongLyricsResponses, UpdateSongLyricsErrors, FindSongByIdData, FindSongByIdResponses, FindSongByIdErrors, UpdateSongData, UpdateSongResponses, UpdateSongErrors, FindTagByKeywordData, FindTagByKeywordResponses, FindTagByKeywordErrors, CreateTagData, CreateTagResponses, CreateTagErrors, FindTagByIdData, FindTagByIdResponses, FindTagByIdErrors, UpsertTagCorrectionData, UpsertTagCorrectionResponses, UpsertTagCorrectionErrors, UserRolesData, UserRolesResponses, UserRolesErrors, PendingCorrectionData, PendingCorrectionResponses, PendingCorrectionErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const findManyArtist = <ThrowOnError extends boolean = false>(options: Options<FindManyArtistData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindManyArtistResponses, FindManyArtistErrors, ThrowOnError>({
        url: '/artist',
        ...options
    });
};

export const createArtist = <ThrowOnError extends boolean = false>(options: Options<CreateArtistData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateArtistResponses, CreateArtistErrors, ThrowOnError>({
        url: '/artist',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const findArtistById = <ThrowOnError extends boolean = false>(options: Options<FindArtistByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindArtistByIdResponses, FindArtistByIdErrors, ThrowOnError>({
        url: '/artist/{id}',
        ...options
    });
};

export const upsertArtistCorrection = <ThrowOnError extends boolean = false>(options: Options<UpsertArtistCorrectionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpsertArtistCorrectionResponses, UpsertArtistCorrectionErrors, ThrowOnError>({
        url: '/artist/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const findArtistApperances = <ThrowOnError extends boolean = false>(options: Options<FindArtistApperancesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindArtistApperancesResponses, FindArtistApperancesErrors, ThrowOnError>({
        url: '/artist/{id}/appearances',
        ...options
    });
};

export const getArtistCredits = <ThrowOnError extends boolean = false>(options: Options<GetArtistCreditsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetArtistCreditsResponses, GetArtistCreditsErrors, ThrowOnError>({
        url: '/artist/{id}/credits',
        ...options
    });
};

export const findArtistDiscographiesByType = <ThrowOnError extends boolean = false>(options: Options<FindArtistDiscographiesByTypeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindArtistDiscographiesByTypeResponses, FindArtistDiscographiesByTypeErrors, ThrowOnError>({
        url: '/artist/{id}/discographies',
        ...options
    });
};

export const findArtistDiscographiesInit = <ThrowOnError extends boolean = false>(options: Options<FindArtistDiscographiesInitData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindArtistDiscographiesInitResponses, FindArtistDiscographiesInitErrors, ThrowOnError>({
        url: '/artist/{id}/discographies/init',
        ...options
    });
};

export const uploadArtistProfileImage = <ThrowOnError extends boolean = false>(options: Options<UploadArtistProfileImageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UploadArtistProfileImageResponses, UploadArtistProfileImageErrors, ThrowOnError>({
        url: '/artist/{id}/profile-image',
        ...options
    });
};

export const uploadAvatar = <ThrowOnError extends boolean = false>(options: Options<UploadAvatarData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UploadAvatarResponses, UploadAvatarErrors, ThrowOnError>({
        ...formDataBodySerializer,
        url: '/avatar',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

export const handleCorrection = <ThrowOnError extends boolean = false>(options: Options<HandleCorrectionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<HandleCorrectionResponses, HandleCorrectionErrors, ThrowOnError>({
        url: '/correction/{id}',
        ...options
    });
};

export const createCreditRole = <ThrowOnError extends boolean = false>(options: Options<CreateCreditRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateCreditRoleResponses, CreateCreditRoleErrors, ThrowOnError>({
        url: '/credit-role',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const findManyCreditRolesSummary = <ThrowOnError extends boolean = false>(options: Options<FindManyCreditRolesSummaryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindManyCreditRolesSummaryResponses, FindManyCreditRolesSummaryErrors, ThrowOnError>({
        url: '/credit-role/summary',
        ...options
    });
};

export const findCreditRoleById = <ThrowOnError extends boolean = false>(options: Options<FindCreditRoleByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindCreditRoleByIdResponses, FindCreditRoleByIdErrors, ThrowOnError>({
        url: '/credit-role/{id}',
        ...options
    });
};

export const upsertCreditRoleCorrection = <ThrowOnError extends boolean = false>(options: Options<UpsertCreditRoleCorrectionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpsertCreditRoleCorrectionResponses, UpsertCreditRoleCorrectionErrors, ThrowOnError>({
        url: '/credit-role/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const findEventByKeyword = <ThrowOnError extends boolean = false>(options: Options<FindEventByKeywordData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindEventByKeywordResponses, FindEventByKeywordErrors, ThrowOnError>({
        url: '/event',
        ...options
    });
};

export const create = <ThrowOnError extends boolean = false>(options: Options<CreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateResponses, CreateErrors, ThrowOnError>({
        url: '/event',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const findEventById = <ThrowOnError extends boolean = false>(options: Options<FindEventByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindEventByIdResponses, FindEventByIdErrors, ThrowOnError>({
        url: '/event/{id}',
        ...options
    });
};

export const upsertCorrection = <ThrowOnError extends boolean = false>(options: Options<UpsertCorrectionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpsertCorrectionResponses, UpsertCorrectionErrors, ThrowOnError>({
        url: '/event/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const healthCheck = <ThrowOnError extends boolean = false>(options?: Options<HealthCheckData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<HealthCheckResponses, unknown, ThrowOnError>({
        url: '/health_check',
        ...options
    });
};

export const findLabelByKeyword = <ThrowOnError extends boolean = false>(options: Options<FindLabelByKeywordData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindLabelByKeywordResponses, FindLabelByKeywordErrors, ThrowOnError>({
        url: '/label',
        ...options
    });
};

export const createLabel = <ThrowOnError extends boolean = false>(options: Options<CreateLabelData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateLabelResponses, CreateLabelErrors, ThrowOnError>({
        url: '/label',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const findLabelById = <ThrowOnError extends boolean = false>(options: Options<FindLabelByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindLabelByIdResponses, FindLabelByIdErrors, ThrowOnError>({
        url: '/label/{id}',
        ...options
    });
};

export const upsertLabelCorrection = <ThrowOnError extends boolean = false>(options: Options<UpsertLabelCorrectionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpsertLabelCorrectionResponses, UpsertLabelCorrectionErrors, ThrowOnError>({
        url: '/label/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const languageList = <ThrowOnError extends boolean = false>(options?: Options<LanguageListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<LanguageListResponses, LanguageListErrors, ThrowOnError>({
        url: '/languages',
        ...options
    });
};

export const profile = <ThrowOnError extends boolean = false>(options?: Options<ProfileData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ProfileResponses, ProfileErrors, ThrowOnError>({
        url: '/profile',
        ...options
    });
};

export const uploadProfileBanner = <ThrowOnError extends boolean = false>(options: Options<UploadProfileBannerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UploadProfileBannerResponses, UploadProfileBannerErrors, ThrowOnError>({
        ...formDataBodySerializer,
        url: '/profile-banner',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

export const updateBio = <ThrowOnError extends boolean = false>(options: Options<UpdateBioData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdateBioResponses, UpdateBioErrors, ThrowOnError>({
        bodySerializer: null,
        url: '/profile/bio',
        ...options,
        headers: {
            'Content-Type': 'text/plain',
            ...options.headers
        }
    });
};

export const profileWithName = <ThrowOnError extends boolean = false>(options: Options<ProfileWithNameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProfileWithNameResponses, ProfileWithNameErrors, ThrowOnError>({
        url: '/profile/{name}',
        ...options
    });
};

export const findReleaseByKeyword = <ThrowOnError extends boolean = false>(options: Options<FindReleaseByKeywordData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindReleaseByKeywordResponses, FindReleaseByKeywordErrors, ThrowOnError>({
        url: '/release',
        ...options
    });
};

export const createRelease = <ThrowOnError extends boolean = false>(options: Options<CreateReleaseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateReleaseResponses, CreateReleaseErrors, ThrowOnError>({
        url: '/release',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const findReleaseById = <ThrowOnError extends boolean = false>(options: Options<FindReleaseByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindReleaseByIdResponses, FindReleaseByIdErrors, ThrowOnError>({
        url: '/release/{id}',
        ...options
    });
};

export const updateRelease = <ThrowOnError extends boolean = false>(options: Options<UpdateReleaseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdateReleaseResponses, UpdateReleaseErrors, ThrowOnError>({
        url: '/release/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const uploadReleaseCoverArt = <ThrowOnError extends boolean = false>(options: Options<UploadReleaseCoverArtData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UploadReleaseCoverArtResponses, UploadReleaseCoverArtErrors, ThrowOnError>({
        url: '/release/{id}/cover-art',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const signIn = <ThrowOnError extends boolean = false>(options: Options<SignInData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SignInResponses, SignInErrors, ThrowOnError>({
        url: '/sign-in',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const signOut = <ThrowOnError extends boolean = false>(options?: Options<SignOutData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<SignOutResponses, SignOutErrors, ThrowOnError>({
        url: '/sign-out',
        ...options
    });
};

export const signUp = <ThrowOnError extends boolean = false>(options: Options<SignUpData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SignUpResponses, SignUpErrors, ThrowOnError>({
        url: '/sign-up',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const findSongByKeyword = <ThrowOnError extends boolean = false>(options: Options<FindSongByKeywordData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindSongByKeywordResponses, FindSongByKeywordErrors, ThrowOnError>({
        url: '/song',
        ...options
    });
};

export const createSong = <ThrowOnError extends boolean = false>(options: Options<CreateSongData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateSongResponses, CreateSongErrors, ThrowOnError>({
        url: '/song',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const findOneSongLyrics = <ThrowOnError extends boolean = false>(options: Options<FindOneSongLyricsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindOneSongLyricsResponses, FindOneSongLyricsErrors, ThrowOnError>({
        url: '/song-lyrics',
        ...options
    });
};

export const createSongLyrics = <ThrowOnError extends boolean = false>(options: Options<CreateSongLyricsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateSongLyricsResponses, CreateSongLyricsErrors, ThrowOnError>({
        url: '/song-lyrics',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const findManySongLyrics = <ThrowOnError extends boolean = false>(options: Options<FindManySongLyricsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindManySongLyricsResponses, FindManySongLyricsErrors, ThrowOnError>({
        url: '/song-lyrics/many',
        ...options
    });
};

export const updateSongLyrics = <ThrowOnError extends boolean = false>(options: Options<UpdateSongLyricsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdateSongLyricsResponses, UpdateSongLyricsErrors, ThrowOnError>({
        url: '/song-lyrics/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const findSongById = <ThrowOnError extends boolean = false>(options: Options<FindSongByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindSongByIdResponses, FindSongByIdErrors, ThrowOnError>({
        url: '/song/{id}',
        ...options
    });
};

export const updateSong = <ThrowOnError extends boolean = false>(options: Options<UpdateSongData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdateSongResponses, UpdateSongErrors, ThrowOnError>({
        url: '/song/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const findTagByKeyword = <ThrowOnError extends boolean = false>(options: Options<FindTagByKeywordData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindTagByKeywordResponses, FindTagByKeywordErrors, ThrowOnError>({
        url: '/tag',
        ...options
    });
};

export const createTag = <ThrowOnError extends boolean = false>(options: Options<CreateTagData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateTagResponses, CreateTagErrors, ThrowOnError>({
        url: '/tag',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const findTagById = <ThrowOnError extends boolean = false>(options: Options<FindTagByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindTagByIdResponses, FindTagByIdErrors, ThrowOnError>({
        url: '/tag/{id}',
        ...options
    });
};

export const upsertTagCorrection = <ThrowOnError extends boolean = false>(options: Options<UpsertTagCorrectionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpsertTagCorrectionResponses, UpsertTagCorrectionErrors, ThrowOnError>({
        url: '/tag/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const userRoles = <ThrowOnError extends boolean = false>(options?: Options<UserRolesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserRolesResponses, UserRolesErrors, ThrowOnError>({
        url: '/user-roles',
        ...options
    });
};

export const pendingCorrection = <ThrowOnError extends boolean = false>(options: Options<PendingCorrectionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<PendingCorrectionResponses, PendingCorrectionErrors, ThrowOnError>({
        url: '/{entity_type}/{id}/pending-correction',
        ...options
    });
};